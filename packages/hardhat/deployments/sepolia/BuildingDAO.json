{
  "address": "0xD15eEDE1854228DdD1D4fD77073cC9fdA91dD899",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_buildingName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_totalApartments",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_initialOwners",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OwnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OwnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voteContract",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "ProposalTiming",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VOTING_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildingInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "buildingName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalApartments",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "enum BuildingDAO.ProposalType",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveProposals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnerTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "voteContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getVoteContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getVotingPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "delegateTo",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalVotes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "inFavor",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_proposalAddress",
          "type": "address"
        }
      ],
      "name": "sendVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteToken",
      "outputs": [
        {
          "internalType": "contract VoteToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
  "receipt": {
    "to": null,
    "from": "0xdbB3Dbbff646c1F21A6c6e3C1a195021033dad6F",
    "contractAddress": "0xD15eEDE1854228DdD1D4fD77073cC9fdA91dD899",
    "transactionIndex": 48,
    "gasUsed": "4593185",
    "logsBloom": "0x
    "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e",
    "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 7241001,
        "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
        "address": "0x937e532F3E3295c679A9668A3EA90A26E06BF6fA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d15eede1854228ddd1d4fd77073cc9fda91dd899"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 7241001,
        "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
        "address": "0x937e532F3E3295c679A9668A3EA90A26E06BF6fA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbb3dbbff646c1f21a6c6e3c1a195021033dad6f",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 7241001,
        "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
        "address": "0xD15eEDE1854228DdD1D4fD77073cC9fdA91dD899",
        "topics": [
          "0x567d314b1f4bef0cf41b5eea6a621ebe9b67dfafe183c591176a3efce5ecc0df",
          "0x000000000000000000000000dbb3dbbff646c1f21a6c6e3c1a195021033dad6f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 57,
        "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 7241001,
        "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
        "address": "0x937e532F3E3295c679A9668A3EA90A26E06BF6fA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 58,
        "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 7241001,
        "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
        "address": "0xD15eEDE1854228DdD1D4fD77073cC9fdA91dD899",
        "topics": [
          "0x567d314b1f4bef0cf41b5eea6a621ebe9b67dfafe183c591176a3efce5ecc0df",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 59,
        "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 7241001,
        "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
        "address": "0x937e532F3E3295c679A9668A3EA90A26E06BF6fA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 7241001,
        "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
        "address": "0xD15eEDE1854228DdD1D4fD77073cC9fdA91dD899",
        "topics": [
          "0x567d314b1f4bef0cf41b5eea6a621ebe9b67dfafe183c591176a3efce5ecc0df",
          "0x0000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000003",
        "logIndex": 61,
        "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 7241001,
        "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
        "address": "0x937e532F3E3295c679A9668A3EA90A26E06BF6fA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000ad49e5e66b949424b25572fc99d94d8bf35f575",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 62,
        "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 7241001,
        "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
        "address": "0xD15eEDE1854228DdD1D4fD77073cC9fdA91dD899",
        "topics": [
          "0x567d314b1f4bef0cf41b5eea6a621ebe9b67dfafe183c591176a3efce5ecc0df",
          "0x0000000000000000000000000ad49e5e66b949424b25572fc99d94d8bf35f575"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000004",
        "logIndex": 63,
        "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 7241001,
        "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
        "address": "0x937e532F3E3295c679A9668A3EA90A26E06BF6fA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000090f79bf6eb2c4f870365e785982e1f101e93b906",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 64,
        "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 7241001,
        "transactionHash": "0xc8244c18544c4f3a621ba55921f14845fb0bf66b9f9168768a64d446636cfb4d",
        "address": "0xD15eEDE1854228DdD1D4fD77073cC9fdA91dD899",
        "topics": [
          "0x567d314b1f4bef0cf41b5eea6a621ebe9b67dfafe183c591176a3efce5ecc0df",
          "0x00000000000000000000000090f79bf6eb2c4f870365e785982e1f101e93b906"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000005",
        "logIndex": 65,
        "blockHash": "0x0ef7598b81151753db3aeeffbe2ceff1437e672aee9562f857161d465ee85c7e"
      }
    ],
    "blockNumber": 7241001,
    "cumulativeGasUsed": "9356300",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Edificio Test",
    50,
    [
      "0xdbB3Dbbff646c1F21A6c6e3C1a195021033dad6F",
      "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
      "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC",
      "0x0AD49e5E66B949424b25572FC99d94d8bf35f575",
      "0x90F79bf6EB2c4f870365E785982E1f101E93b906"
    ],
    "0xdbB3Dbbff646c1F21A6c6e3C1a195021033dad6F"
  ],
  "numDeployments": 1,
  "solcInputHash": "1ee09be8afdd6367dc418472ec3c9a56",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_buildingName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalApartments\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_initialOwners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voteContract\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ProposalTiming\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildingInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"buildingName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalApartments\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"enum BuildingDAO.ProposalType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveProposals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"voteContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getVoteContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"delegateTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalVotes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inFavor\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_proposalAddress\",\"type\":\"address\"}],\"name\":\"sendVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteToken\",\"outputs\":[{\"internalType\":\"contract VoteToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BuildingDAO.sol\":\"BuildingDAO\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36797469c391ea5ba27408e6ca8adf0824ba6f3adea9c139be18bd6f63232c16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/BuildingDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"./VoteToken.sol\\\";\\r\\nimport \\\"./Vote.sol\\\";\\r\\n\\r\\ncontract BuildingDAO {\\r\\n    struct Building {\\r\\n        string buildingName;\\r\\n        address treasury;\\r\\n        uint256 totalApartments;\\r\\n    }\\r\\n\\r\\n    struct Owner {\\r\\n        bool isActive;\\r\\n        address delegateTo;\\r\\n    }\\r\\n\\r\\n    enum ProposalType {\\r\\n        MINOR_CHANGE,\\r\\n        MODERATE_CHANGE,\\r\\n        MAJOR_CHANGE\\r\\n    }\\r\\n\\r\\n    Building public buildingInfo;\\r\\n    address public admin;\\r\\n    VoteToken public voteToken;\\r\\n    mapping(address => Owner) public owners;\\r\\n    mapping(uint256 => address) public proposalVotes; // proposalId => Vote contract\\r\\n    uint256 public proposalCount;\\r\\n    uint256 public constant VOTING_DELAY = 1 days;\\r\\n    uint256 public constant VOTING_PERIOD = 7 days;\\r\\n\\r\\n    event ProposalCreated(uint256 indexed proposalId, address voteContract);\\r\\n    event OwnerAdded(address indexed owner, uint256 tokenId);\\r\\n    event OwnerRemoved(address indexed owner, uint256 tokenId);\\r\\n    event ProposalTiming(uint256 start, uint256 end, uint256 duration);\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Solo admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owners[msg.sender].isActive, \\\"Solo propietarios\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        string memory _buildingName,\\r\\n        uint256 _totalApartments,\\r\\n        address[] memory _initialOwners,\\r\\n        address _treasury\\r\\n    ) {\\r\\n        admin = msg.sender;\\r\\n        buildingInfo.buildingName = _buildingName;\\r\\n        buildingInfo.totalApartments = _totalApartments;\\r\\n        buildingInfo.treasury = _treasury;\\r\\n\\r\\n        // Deploy VoteToken\\r\\n        voteToken = new VoteToken();\\r\\n\\r\\n        // Mint tokens for initial owners\\r\\n        for(uint i = 0; i < _initialOwners.length; i++) {\\r\\n            require(_initialOwners[i] != address(0), \\\"Direccion invalida\\\");\\r\\n            owners[_initialOwners[i]].isActive = true;\\r\\n            voteToken.mint(_initialOwners[i], i + 1); // tokenId starts from 1\\r\\n            emit OwnerAdded(_initialOwners[i], i + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n function createProposal(\\r\\n    string memory _title,\\r\\n    string memory _description,\\r\\n    ProposalType _type,\\r\\n    bytes memory /* _callData */\\r\\n) public onlyOwner returns (uint256) {\\r\\n    // Basic validations\\r\\n    require(bytes(_title).length > 0, \\\"Title cannot be empty\\\");\\r\\n    require(bytes(_description).length > 0, \\\"Description cannot be empty\\\");\\r\\n    require(voteToken.balanceOf(msg.sender) > 0, \\\"No tokens owned\\\");\\r\\n    \\r\\n    // Time validations\\r\\n    uint256 startTime = block.timestamp;\\r\\n    uint256 endTime = startTime + VOTING_PERIOD;\\r\\n    emit ProposalTiming(startTime, endTime, VOTING_PERIOD);\\r\\n    require(startTime < endTime, \\\"Invalid voting period\\\");\\r\\n    require(endTime > block.timestamp, \\\"End time must be in future\\\");\\r\\n\\r\\n    // Calculate quorum and majority\\r\\n    uint256 quorum;\\r\\n    uint256 requiredMajority;\\r\\n\\r\\n    if (_type == ProposalType.MINOR_CHANGE) {\\r\\n        quorum = (buildingInfo.totalApartments * 25) / 100;\\r\\n        requiredMajority = 50;\\r\\n    } else if (_type == ProposalType.MODERATE_CHANGE) {\\r\\n        quorum = (buildingInfo.totalApartments * 50) / 100;\\r\\n        requiredMajority = 60;\\r\\n    } else if (_type == ProposalType.MAJOR_CHANGE) {\\r\\n        quorum = (buildingInfo.totalApartments * 75) / 100;\\r\\n        requiredMajority = 75;\\r\\n    } else {\\r\\n        revert(\\\"Invalid proposal type\\\");\\r\\n    }\\r\\n\\r\\n    // Create new vote contract with try/catch\\r\\n    try new Vote(\\r\\n        _title,\\r\\n        _description,\\r\\n        startTime,\\r\\n        endTime,\\r\\n        quorum,\\r\\n        requiredMajority,\\r\\n        _type,\\r\\n        msg.sender,\\r\\n        address(this)\\r\\n    ) returns (Vote newVote) {\\r\\n        uint256 proposalId = proposalCount++;\\r\\n        proposalVotes[proposalId] = address(newVote);\\r\\n        \\r\\n        emit ProposalCreated(proposalId, address(newVote));\\r\\n        return proposalId;\\r\\n    } catch Error(string memory reason) {\\r\\n        revert(string(abi.encodePacked(\\\"Vote creation failed: \\\", reason)));\\r\\n    } catch {\\r\\n        revert(\\\"Vote creation failed\\\");\\r\\n    }\\r\\n}\\r\\n// BuildingDAO.sol - Add these functions\\r\\n\\r\\n// Get Vote contract address by proposalId\\r\\nfunction getVoteContract(uint256 _proposalId) public view returns (address) {\\r\\n    return proposalVotes[_proposalId];\\r\\n}\\r\\n\\r\\n// Get number of proposals\\r\\nfunction getProposalCount() public view returns (uint256) {\\r\\n    return proposalCount;\\r\\n}\\r\\n\\r\\n// Get all active proposals\\r\\nfunction getActiveProposals() public view returns (address[] memory) {\\r\\n    address[] memory activeVotes = new address[](proposalCount);\\r\\n    uint256 activeCount = 0;\\r\\n    \\r\\n    for(uint256 i = 0; i < proposalCount; i++) {\\r\\n        address voteAddress = proposalVotes[i];\\r\\n        if(voteAddress != address(0)) {\\r\\n            Vote vote = Vote(voteAddress);\\r\\n            if(!vote.executed() && block.timestamp <= vote.endTime()) {\\r\\n                activeVotes[activeCount] = voteAddress;\\r\\n                activeCount++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // Resize array to actual count\\r\\n    assembly {\\r\\n        mstore(activeVotes, activeCount)\\r\\n    }\\r\\n    \\r\\n    return activeVotes;\\r\\n}\\r\\n\\r\\n// Get proposal details\\r\\nfunction getProposalDetails(uint256 _proposalId) public view returns (\\r\\n    address voteContract,\\r\\n    string memory title,\\r\\n    string memory description,\\r\\n    uint256 startTime,\\r\\n    uint256 endTime,\\r\\n    uint256 yesVotes,\\r\\n    uint256 noVotes,\\r\\n    bool executed\\r\\n) {\\r\\n    address voteAddress = proposalVotes[_proposalId];\\r\\n    require(voteAddress != address(0), \\\"Proposal does not exist\\\");\\r\\n    \\r\\n    Vote vote = Vote(voteAddress);\\r\\n    return (\\r\\n        voteAddress,\\r\\n        vote.title(),\\r\\n        vote.description(),\\r\\n        vote.startTime(),\\r\\n        vote.endTime(),\\r\\n        vote.yesVotes(),\\r\\n        vote.noVotes(),\\r\\n        vote.executed()\\r\\n    );\\r\\n}\\r\\n    function getOwnerTokens(address _owner) external view returns (uint256) {\\r\\n        return voteToken.balanceOf(_owner);\\r\\n    }\\r\\n\\r\\n    function addOwner(address _owner, uint256 _tokenId) public onlyAdmin {\\r\\n        require(!owners[_owner].isActive, \\\"Ya es propietario\\\");\\r\\n        owners[_owner].isActive = true;\\r\\n        voteToken.mint(_owner, _tokenId);\\r\\n        emit OwnerAdded(_owner, _tokenId);\\r\\n    }\\r\\n\\r\\n    function removeOwner(address _owner) public onlyAdmin {\\r\\n        require(owners[_owner].isActive, \\\"No es propietario\\\");\\r\\n        uint256 tokenId = voteToken.tokenOfOwnerByIndex(_owner, 0);\\r\\n        voteToken.burn(tokenId);\\r\\n        delete owners[_owner];\\r\\n        emit OwnerRemoved(_owner, tokenId);\\r\\n    }\\r\\n\\r\\n    function delegate(address _to) public onlyOwner {\\r\\n        require(_to != msg.sender, \\\"No auto-delegacion\\\");\\r\\n        require(owners[_to].isActive || _to == address(0), \\\"Delegado invalido\\\");\\r\\n        owners[msg.sender].delegateTo = _to;\\r\\n    }\\r\\n\\r\\n    function getVotingPower(address _owner) public view returns (uint256) {\\r\\n        uint256 ownPower = voteToken.balanceOf(_owner);\\r\\n        \\r\\n        // Add delegated power\\r\\n        for (address delegator = msg.sender; delegator != address(0);) {\\r\\n            if (owners[delegator].delegateTo == _owner) {\\r\\n                ownPower += voteToken.balanceOf(delegator);\\r\\n            }\\r\\n            delegator = owners[delegator].delegateTo;\\r\\n        }\\r\\n        \\r\\n        return ownPower;\\r\\n    }\\r\\n\\r\\n    function sendVote(bool inFavor, address _proposalAddress) external {\\r\\n    // Verifica que la direcci\\u00f3n de la propuesta no sea la direcci\\u00f3n cero\\r\\n    require(_proposalAddress != address(0), \\\"Proposal does not exist\\\");\\r\\n\\r\\n    // Llama a la funci\\u00f3n 'vote' del contrato Vote correspondiente\\r\\n    Vote(_proposalAddress).vote(inFavor);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xeebc59db9b0e183ea1fee9f3077fb3ec21e6868507093bf7346b7cab65ed1e08\",\"license\":\"MIT\"},\"contracts/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"./BuildingDAO.sol\\\";\\r\\n\\r\\ncontract Vote {\\r\\n    address public parentDao;\\r\\n    BuildingDAO.ProposalType public proposal;\\r\\n\\r\\n    string public title;\\r\\n    string public description;\\r\\n\\r\\n    uint256 public startTime;\\r\\n    uint256 public endTime;\\r\\n    uint256 public quorum;\\r\\n    uint256 public requiredMajority; // Fixed spelling\\r\\n    uint256 public yesVotes;\\r\\n    uint256 public noVotes;\\r\\n    address public creator;\\r\\n\\r\\n    bool public executed;\\r\\n\\r\\n    mapping(address => bool) public hasVoted;\\r\\n\\r\\n    event Voted(address indexed voter, bool inFavor);\\r\\n    event ProposalExecuted();\\r\\n    event Debug(string message, uint256 value); // Add debug event\\r\\n\\r\\n    constructor(\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        uint256 _startTime,\\r\\n        uint256 _endTime,\\r\\n        uint256 _quorum,\\r\\n        uint256 _requiredMajority,\\r\\n        BuildingDAO.ProposalType _proposal,\\r\\n        address _creator,\\r\\n        address _parentDao\\r\\n    ) {\\r\\n        title = _title;\\r\\n        description = _description;\\r\\n        startTime = _startTime;\\r\\n        endTime = _endTime;\\r\\n        quorum = _quorum;\\r\\n        requiredMajority = _requiredMajority;\\r\\n        proposal = _proposal;\\r\\n        creator = _creator;\\r\\n        parentDao = _parentDao; // Fixed casing\\r\\n    }\\r\\n\\r\\n    function vote(bool inFavor) external {\\r\\n        // Add debug events\\r\\n        emit Debug(\\\"Current time\\\", block.timestamp);\\r\\n        emit Debug(\\\"Start time\\\", startTime);\\r\\n        emit Debug(\\\"End time\\\", endTime);\\r\\n\\r\\n        // Check if voting period is valid\\r\\n        require(startTime < endTime, \\\"Invalid voting period\\\");\\r\\n\\r\\n        // Check if voting is active\\r\\n        require(block.timestamp >= startTime, \\\"Voting not started\\\");\\r\\n        require(block.timestamp <= endTime, \\\"Voting ended\\\");\\r\\n        require(!hasVoted[msg.sender], \\\"Already voted\\\");\\r\\n\\r\\n        uint256 tokensOwned = BuildingDAO(parentDao).getOwnerTokens(msg.sender);\\r\\n        require(tokensOwned > 0, \\\"No tokens owned\\\");\\r\\n\\r\\n        hasVoted[msg.sender] = true;\\r\\n        if (inFavor) {\\r\\n            yesVotes += tokensOwned;\\r\\n        } else {\\r\\n            noVotes += tokensOwned;\\r\\n        }\\r\\n\\r\\n        emit Voted(msg.sender, inFavor);\\r\\n    }\\r\\n\\r\\n    function hasAddressVoted(address _voter) external view returns (bool) {\\r\\n        return hasVoted[_voter];\\r\\n    }\\r\\n\\r\\n    function executeProposal() external {\\r\\n        require(block.timestamp > endTime, \\\"Voting ongoing\\\");\\r\\n        require(!executed, \\\"Already executed\\\");\\r\\n\\r\\n        uint256 totalVotes = yesVotes + noVotes;\\r\\n        require(totalVotes >= quorum, \\\"Quorum not reached\\\");\\r\\n\\r\\n        if ((yesVotes * 100) / totalVotes >= requiredMajority) {\\r\\n            executed = true;\\r\\n            emit ProposalExecuted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getVoteStatistics() external view returns (\\r\\n        uint256 _yesVotes,\\r\\n        uint256 _noVotes,\\r\\n        uint256 _quorum,\\r\\n        uint256 _requiredMajority,\\r\\n        bool _hasEnded,\\r\\n        bool _quorumReached,\\r\\n        bool _majorityReached\\r\\n    ) {\\r\\n        uint256 totalVotes = yesVotes + noVotes;\\r\\n        uint256 yesPercentage = totalVotes > 0 ? (yesVotes * 100) / totalVotes : 0;\\r\\n        \\r\\n        return (\\r\\n            yesVotes,\\r\\n            noVotes,\\r\\n            quorum,\\r\\n            requiredMajority,\\r\\n            block.timestamp > endTime,\\r\\n            totalVotes >= quorum,\\r\\n            yesPercentage >= requiredMajority\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Add helper function to check voting status\\r\\n    function getVotingStatus() public view returns (\\r\\n        uint256 currentTime,\\r\\n        uint256 votingStart,\\r\\n        uint256 votingEnd,\\r\\n        bool isActive\\r\\n    ) {\\r\\n        return (\\r\\n            block.timestamp,\\r\\n            startTime,\\r\\n            endTime,\\r\\n            (block.timestamp >= startTime && block.timestamp <= endTime)\\r\\n        );\\r\\n    }\\r\\n}\",\"keccak256\":\"0x006ba077bfe03cbb8d42ce3a44413942d8eea9acbbd2fd263b969e3fe6f64868\",\"license\":\"MIT\"},\"contracts/VoteToken.sol\":{\"content\":\"// VoteToken.sol\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract VoteToken is ERC721Enumerable, Ownable {\\r\\n    constructor() ERC721(\\\"VoteToken\\\", \\\"VTT\\\") Ownable(msg.sender) {}\\r\\n    \\r\\n    // Solo el owner (BuildingDAO) puede mintear tokens\\r\\n    function mint(address to, uint256 tokenId) external onlyOwner {\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n    \\r\\n    // Solo el owner puede quemar tokens\\r\\n    function burn(uint256 tokenId) external onlyOwner {\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4f1d9a5fedb2c06a3102df55d71128e88e84da39bdde7ccf67f15db3e6a06670\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001395760003560e01c806360f827bf11620000bb578063d6159fe5116200007a578063d6159fe51462000312578063d63d4af0146200031d578063da35c6641462000334578063f851a440146200033e578063fec4cb98146200035257600080fd5b806360f827bf1462000295578063755da8b314620002bb578063b1610d7e14620002e7578063bb4d443614620002f2578063c08cc02d146200030957600080fd5b80633cc38f5c11620001085780633cc38f5c146200020b578063544ffc9c14620002225780635584c4f9146200024e5780635b34581414620002675780635c19a95c146200027e57600080fd5b8063022914a7146200013e578063160d66ae1462000198578063173825d914620001c55780633b4d01a714620001de575b600080fd5b620001746200014f366004620015c6565b60056020526000908152604090205460ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b039091166020830152015b60405180910390f35b600454620001ac906001600160a01b031681565b6040516001600160a01b0390911681526020016200018f565b620001dc620001d6366004620015c6565b6200036d565b005b620001f5620001ef366004620015eb565b6200055e565b6040516200018f98979695949392919062001659565b620001dc6200021c366004620016c4565b620008bc565b620001ac62000233366004620015eb565b6006602052600090815260409020546001600160a01b031681565b6200025862000a25565b6040516200018f9190620016f1565b620001dc6200027836600462001752565b62000bd6565b620001dc6200028f366004620015c6565b62000c89565b620002ac620002a63660046200186b565b62000dd3565b6040519081526020016200018f565b620001ac620002cc366004620015eb565b6000908152600660205260409020546001600160a01b031690565b620002ac62093a8081565b620002ac62000303366004620015c6565b62001308565b600754620002ac565b620002ac6201518081565b620002ac6200032e366004620015c6565b6200146e565b620002ac60075481565b600354620001ac906001600160a01b031681565b6200035c620014eb565b6040516200018f939291906200192c565b6003546001600160a01b03163314620003ba5760405162461bcd60e51b815260206004820152600a60248201526929b7b6379030b236b4b760b11b60448201526064015b60405180910390fd5b6001600160a01b03811660009081526005602052604090205460ff16620004185760405162461bcd60e51b81526020600482015260116024820152704e6f2065732070726f706965746172696f60781b6044820152606401620003b1565b60048054604051632f745c5960e01b81526001600160a01b03848116938201939093526000602482018190529290911690632f745c5990604401602060405180830381865afa15801562000470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049691906200195c565b60048054604051630852cd8d60e31b81529293506001600160a01b0316916342966c6891620004cb9185910190815260200190565b600060405180830381600087803b158015620004e657600080fd5b505af1158015620004fb573d6000803e3d6000fd5b505050506001600160a01b03821660008181526005602090815260409182902080546001600160a81b031916905590518381527f769fbc2ec8c9a4bc66b4767cd66ac7ca0ca967982b7c375411e03d66bbfb64c291015b60405180910390a25050565b6000818152600660205260408120546060908190839081908190819081906001600160a01b031680620005ce5760405162461bcd60e51b8152602060048201526017602482015276141c9bdc1bdcd85b08191bd95cc81b9bdd08195e1a5cdd604a1b6044820152606401620003b1565b600081905081816001600160a01b0316634a79d50c6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000613573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200063d919081019062001976565b826001600160a01b0316637284e4166040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200067c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620006a6919081019062001976565b836001600160a01b03166378e979256040518163ffffffff1660e01b8152600401602060405180830381865afa158015620006e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200070b91906200195c565b846001600160a01b0316633197cbb66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200074a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200077091906200195c565b856001600160a01b031663fb286c656040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007d591906200195c565b866001600160a01b031663b5b47f426040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200083a91906200195c565b876001600160a01b03166331a38c896040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000879573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200089f919062001a02565b995099509950995099509950995099505050919395975091939597565b6003546001600160a01b03163314620009055760405162461bcd60e51b815260206004820152600a60248201526929b7b6379030b236b4b760b11b6044820152606401620003b1565b6001600160a01b03821660009081526005602052604090205460ff1615620009645760405162461bcd60e51b815260206004820152601160248201527059612065732070726f706965746172696f60781b6044820152606401620003b1565b6001600160a01b0382811660008181526005602052604090819020805460ff191660011790556004805491516340c10f1960e01b81529081019290925260248201849052909116906340c10f1990604401600060405180830381600087803b158015620009d057600080fd5b505af1158015620009e5573d6000803e3d6000fd5b50505050816001600160a01b03167f567d314b1f4bef0cf41b5eea6a621ebe9b67dfafe183c591176a3efce5ecc0df826040516200055291815260200190565b6060600060075467ffffffffffffffff81111562000a475762000a476200178c565b60405190808252806020026020018201604052801562000a71578160200160208202803683370190505b5090506000805b60075481101562000bce576000818152600660205260409020546001600160a01b0316801562000bc4576000819050806001600160a01b03166331a38c896040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000ae6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b0c919062001a02565b15801562000b7e5750806001600160a01b0316633197cbb66040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b54573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b7a91906200195c565b4211155b1562000bc2578185858151811062000b9a5762000b9a62001a22565b6001600160a01b03909216602092830291909101909101528362000bbe8162001a4e565b9450505b505b5060010162000a78565b508152919050565b6001600160a01b03811662000c285760405162461bcd60e51b8152602060048201526017602482015276141c9bdc1bdcd85b08191bd95cc81b9bdd08195e1a5cdd604a1b6044820152606401620003b1565b604051630973eb9360e31b815282151560048201526001600160a01b03821690634b9f5c9890602401600060405180830381600087803b15801562000c6c57600080fd5b505af115801562000c81573d6000803e3d6000fd5b505050505050565b3360009081526005602052604090205460ff1662000cde5760405162461bcd60e51b8152602060048201526011602482015270536f6c6f2070726f706965746172696f7360781b6044820152606401620003b1565b336001600160a01b0382160362000d2d5760405162461bcd60e51b815260206004820152601260248201527127379030baba3796b232b632b3b0b1b4b7b760711b6044820152606401620003b1565b6001600160a01b03811660009081526005602052604090205460ff168062000d5c57506001600160a01b038116155b62000d9e5760405162461bcd60e51b815260206004820152601160248201527044656c656761646f20696e76616c69646f60781b6044820152606401620003b1565b33600090815260056020526040902080546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b3360009081526005602052604081205460ff1662000e285760405162461bcd60e51b8152602060048201526011602482015270536f6c6f2070726f706965746172696f7360781b6044820152606401620003b1565b600085511162000e735760405162461bcd60e51b81526020600482015260156024820152745469746c652063616e6e6f7420626520656d70747960581b6044820152606401620003b1565b600084511162000ec65760405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d70747900000000006044820152606401620003b1565b600480546040516370a0823160e01b815233928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801562000f15573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f3b91906200195c565b1162000f7c5760405162461bcd60e51b815260206004820152600f60248201526e139bc81d1bdad95b9cc81bdddb9959608a1b6044820152606401620003b1565b42600062000f8e62093a808362001a6a565b604080518481526020810183905262093a808183015290519192507fefc183e6550d8c2dc8a6373cbfbc16aea2198107b6e3d4bc068798b26d7fc060919081900360600190a18082106200101d5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081d9bdd1a5b99c81c195c9a5bd9605a1b6044820152606401620003b1565b4281116200106e5760405162461bcd60e51b815260206004820152601a60248201527f456e642074696d65206d75737420626520696e206675747572650000000000006044820152606401620003b1565b6000808087600281111562001087576200108762001a80565b03620010b857600254606490620010a090601962001a96565b620010ac919062001ab0565b91506032905062001189565b6001876002811115620010cf57620010cf62001a80565b036200110057600254606490620010e890603262001a96565b620010f4919062001ab0565b9150603c905062001189565b600287600281111562001117576200111762001a80565b0362001148576002546064906200113090604b62001a96565b6200113c919062001ab0565b9150604b905062001189565b60405162461bcd60e51b8152602060048201526015602482015274496e76616c69642070726f706f73616c207479706560581b6044820152606401620003b1565b8888858585858c3330604051620011a0906200159b565b620011b49998979695949392919062001ad3565b604051809103906000f08015620011c85760015b6200127857620011d762001b64565b806308c379a003620012365750620011ee62001b81565b80620011fb575062001238565b806040516020016200120e919062001c11565b60408051601f198184030181529082905262461bcd60e51b8252620003b19160040162001c51565b505b60405162461bcd60e51b8152602060048201526014602482015273159bdd194818dc99585d1a5bdb8819985a5b195960621b6044820152606401620003b1565b60078054600091826200128b8362001a4e565b9091555060008181526006602090815260409182902080546001600160a01b0319166001600160a01b038716908117909155915191825291925082917fcd423cc1203c0af96b9b3d68d73b3064a69de2d14450bb7181c5e5df2132b358910160405180910390a2955062001300945050505050565b949350505050565b600480546040516370a0823160e01b81526001600160a01b0384811693820193909352600092839216906370a0823190602401602060405180830381865afa15801562001359573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200137f91906200195c565b9050335b6001600160a01b0381161562001467576001600160a01b03818116600090815260056020526040902054818616610100909104909116036200144157600480546040516370a0823160e01b81526001600160a01b03848116938201939093529116906370a0823190602401602060405180830381865afa1580156200140c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200143291906200195c565b6200143e908362001a6a565b91505b6001600160a01b0390811660009081526005602052604090205461010090041662001383565b5092915050565b600480546040516370a0823160e01b81526001600160a01b0384811693820193909352600092909116906370a0823190602401602060405180830381865afa158015620014bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014e591906200195c565b92915050565b600080548190620014fc9062001c66565b80601f01602080910402602001604051908101604052809291908181526020018280546200152a9062001c66565b80156200157b5780601f106200154f576101008083540402835291602001916200157b565b820191906000526020600020905b8154815290600101906020018083116200155d57829003601f168201915b50505050600183015460029093015491926001600160a01b031691905083565b610ea48062001ca383390190565b80356001600160a01b0381168114620015c157600080fd5b919050565b600060208284031215620015d957600080fd5b620015e482620015a9565b9392505050565b600060208284031215620015fe57600080fd5b5035919050565b60005b838110156200162257818101518382015260200162001608565b50506000910152565b600081518084526200164581602086016020860162001605565b601f01601f19169290920160200192915050565b6001600160a01b038916815261010060208201819052600090620016808382018b6200162b565b9050828103604084015262001696818a6200162b565b60608401989098525050608081019490945260a084019290925260c0830152151560e0909101529392505050565b60008060408385031215620016d857600080fd5b620016e383620015a9565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015620017345783516001600160a01b0316835292840192918401916001016200170d565b50909695505050505050565b80151581146200174f57600080fd5b50565b600080604083850312156200176657600080fd5b8235620017738162001740565b91506200178360208401620015a9565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715620017cb57620017cb6200178c565b6040525050565b600067ffffffffffffffff821115620017ef57620017ef6200178c565b50601f01601f191660200190565b60006200180a83620017d2565b604051620018198282620017a2565b8092508481528585850111156200182f57600080fd5b8484602083013760006020868301015250509392505050565b600082601f8301126200185a57600080fd5b620015e483833560208501620017fd565b600080600080608085870312156200188257600080fd5b843567ffffffffffffffff808211156200189b57600080fd5b620018a98883890162001848565b95506020870135915080821115620018c057600080fd5b620018ce8883890162001848565b94506040870135915060038210620018e557600080fd5b90925060608601359080821115620018fc57600080fd5b508501601f810187136200190f57600080fd5b6200192087823560208401620017fd565b91505092959194509250565b6060815260006200194160608301866200162b565b6001600160a01b039490941660208301525060400152919050565b6000602082840312156200196f57600080fd5b5051919050565b6000602082840312156200198957600080fd5b815167ffffffffffffffff811115620019a157600080fd5b8201601f81018413620019b357600080fd5b8051620019c081620017d2565b604051620019cf8282620017a2565b828152866020848601011115620019e557600080fd5b620019f883602083016020870162001605565b9695505050505050565b60006020828403121562001a1557600080fd5b8151620015e48162001740565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162001a635762001a6362001a38565b5060010190565b80820180821115620014e557620014e562001a38565b634e487b7160e01b600052602160045260246000fd5b8082028115828204841417620014e557620014e562001a38565b60008262001ace57634e487b7160e01b600052601260045260246000fd5b500490565b600061012080835262001ae98184018d6200162b565b9050828103602084015262001aff818c6200162b565b9150508860408301528760608301528660808301528560a08301526003851062001b3957634e487b7160e01b600052602160045260246000fd5b60c08201949094526001600160a01b0392831660e08201529116610100909101529695505050505050565b600060033d111562001b7e5760046000803e5060005160e01c5b90565b600060443d101562001b905790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171562001bc157505050505090565b828501915081518181111562001bda5750505050505090565b843d870101602082850101111562001bf55750505050505090565b62001c0660208286010187620017a2565b509095945050505050565b7502b37ba329031b932b0ba34b7b7103330b4b632b21d160551b81526000825162001c4481601685016020870162001605565b9190910160160192915050565b602081526000620015e460208301846200162b565b600181811c9082168062001c7b57607f821691505b60208210810362001c9c57634e487b7160e01b600052602260045260246000fd5b5091905056fe60806040523480156200001157600080fd5b5060405162000ea438038062000ea48339810160408190526200003491620001b2565b6001620000428a8262000311565b50600262000051898262000311565b5060038790556004869055600585905560068490556000805484919060ff60a01b1916600160a01b8360028111156200008e576200008e620003dd565b0217905550600980546001600160a01b039384166001600160a01b0319918216179091556000805492909316911617905550620003f395505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000f557600080fd5b81516001600160401b0380821115620001125762000112620000cd565b604051601f8301601f19908116603f011681019082821181831017156200013d576200013d620000cd565b81604052838152602092508660208588010111156200015b57600080fd5b600091505b838210156200017f578582018301518183018401529082019062000160565b6000602085830101528094505050505092915050565b80516001600160a01b0381168114620001ad57600080fd5b919050565b60008060008060008060008060006101208a8c031215620001d257600080fd5b89516001600160401b0380821115620001ea57600080fd5b620001f88d838e01620000e3565b9a5060208c01519150808211156200020f57600080fd5b506200021e8c828d01620000e3565b98505060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151600381106200025057600080fd5b92506200026060e08b0162000195565b9150620002716101008b0162000195565b90509295985092959850929598565b600181811c908216806200029557607f821691505b602082108103620002b657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200030c576000816000526020600020601f850160051c81016020861015620002e75750805b601f850160051c820191505b818110156200030857828155600101620002f3565b5050505b505050565b81516001600160401b038111156200032d576200032d620000cd565b62000345816200033e845462000280565b84620002bc565b602080601f8311600181146200037d5760008415620003645750858301515b600019600386901b1c1916600185901b17855562000308565b600085815260208120601f198616915b82811015620003ae578886015182559484019460019091019084016200038d565b5085821015620003cd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052602160045260246000fd5b610aa180620004036000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80634b9f5c98116100a257806378e979251161007157806378e979251461028357806382993ee51461028c578063b5b47f421461029f578063e3e6ca7d146102a8578063fb286c65146102d457600080fd5b80634b9f5c981461021d578063581c281c146102305780637284e4161461025a578063753ec1031461026257600080fd5b806331a38c89116100e957806331a38c891461019e57806332f1c324146101b2578063373058b8146101bb57806339456432146101c55780634a79d50c1461020857600080fd5b806302d05d3f1461011b57806309eef43e1461014b5780631703a0181461017e5780633197cbb614610195575b600080fd5b60095461012e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61016e6101593660046108e7565b600a6020526000908152604090205460ff1681565b6040519015158152602001610142565b61018760055481565b604051908152602001610142565b61018760045481565b60095461016e90600160a01b900460ff1681565b61018760065481565b6101c36102dd565b005b6101cd61042e565b60408051978852602088019690965294860193909352606085019190915215156080840152151560a0830152151560c082015260e001610142565b6102106104a7565b6040516101429190610917565b6101c361022b366004610966565b610535565b6102386108ab565b6040805194855260208501939093529183015215156060820152608001610142565b6102106108da565b60005461027690600160a01b900460ff1681565b6040516101429190610988565b61018760035481565b60005461012e906001600160a01b031681565b61018760085481565b61016e6102b63660046108e7565b6001600160a01b03166000908152600a602052604090205460ff1690565b61018760075481565b60045442116103245760405162461bcd60e51b815260206004820152600e60248201526d566f74696e67206f6e676f696e6760901b60448201526064015b60405180910390fd5b600954600160a01b900460ff16156103715760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b604482015260640161031b565b600060085460075461038391906109c6565b90506005548110156103cc5760405162461bcd60e51b8152602060048201526012602482015271145d5bdc9d5b481b9bdd081c995858da195960721b604482015260640161031b565b6006548160075460646103df91906109df565b6103e991906109f6565b1061042b576009805460ff60a01b1916600160a01b1790556040517fcf88c657fb0ecbed2a624b6b4c626e2ceda32ea9ed16ea81de6362a6d965bd0890600090a15b50565b60008060008060008060008060085460075461044a91906109c6565b9050600080821161045c576000610476565b81600754606461046c91906109df565b61047691906109f6565b600754600854600554600654600454939e929d50909b50995042919091119750928911159550871115935090915050565b600180546104b490610a18565b80601f01602080910402602001604051908101604052809291908181526020018280546104e090610a18565b801561052d5780601f106105025761010080835404028352916020019161052d565b820191906000526020600020905b81548152906001019060200180831161051057829003601f168201915b505050505081565b60408051818152600c818301526b43757272656e742074696d6560a01b606082015242602082015290517f3c5ad147104e56be34a9176a6692f7df8d2f4b29a5af06bc6b98970d329d65779181900360800190a17f3c5ad147104e56be34a9176a6692f7df8d2f4b29a5af06bc6b98970d329d65776003546040516105e191906040808252600a908201526953746172742074696d6560b01b6060820152602081019190915260800190565b60405180910390a17f3c5ad147104e56be34a9176a6692f7df8d2f4b29a5af06bc6b98970d329d657760045460405161063f9190604080825260089082015267456e642074696d6560c01b6060820152602081019190915260800190565b60405180910390a1600454600354106106925760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081d9bdd1a5b99c81c195c9a5bd9605a1b604482015260640161031b565b6003544210156106d95760405162461bcd60e51b8152602060048201526012602482015271159bdd1a5b99c81b9bdd081cdd185c9d195960721b604482015260640161031b565b60045442111561071a5760405162461bcd60e51b815260206004820152600c60248201526b159bdd1a5b99c8195b99195960a21b604482015260640161031b565b336000908152600a602052604090205460ff161561076a5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b604482015260640161031b565b60008054604051630d63d4af60e41b81523360048201526001600160a01b039091169063d63d4af090602401602060405180830381865afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190610a52565b90506000811161081b5760405162461bcd60e51b815260206004820152600f60248201526e139bc81d1bdad95b9cc81bdddb9959608a1b604482015260640161031b565b336000908152600a60205260409020805460ff19166001179055811561085857806007600082825461084d91906109c6565b909155506108709050565b806008600082825461086a91906109c6565b90915550505b604051821515815233907f8eb81cb806dbb3d8a2f94981614331a55dfd90e06a42fdc362ca3ca96981d92f9060200160405180910390a25050565b6000806000804260035460045460035442101580156108cc57506004544211155b935093509350935090919293565b600280546104b490610a18565b6000602082840312156108f957600080fd5b81356001600160a01b038116811461091057600080fd5b9392505050565b60006020808352835180602085015260005b8181101561094557858101830151858201604001528201610929565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561097857600080fd5b8135801515811461091057600080fd5b60208101600383106109aa57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052601160045260246000fd5b808201808211156109d9576109d96109b0565b92915050565b80820281158282048414176109d9576109d96109b0565b600082610a1357634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680610a2c57607f821691505b602082108103610a4c57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610a6457600080fd5b505191905056fea26469706673582212204fc4ef83197ef74febde91cfc975efd651675015db488a87c4d30af2863b19d064736f6c63430008180033a2646970667358221220b0cec7fdb0558a3ead7265ac47c08da89babf3260b8d65cf3cbdb094534fb8f364736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3375,
        "contract": "contracts/BuildingDAO.sol:BuildingDAO",
        "label": "buildingInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Building)3363_storage"
      },
      {
        "astId": 3377,
        "contract": "contracts/BuildingDAO.sol:BuildingDAO",
        "label": "admin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3380,
        "contract": "contracts/BuildingDAO.sol:BuildingDAO",
        "label": "voteToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(VoteToken)4537"
      },
      {
        "astId": 3385,
        "contract": "contracts/BuildingDAO.sol:BuildingDAO",
        "label": "owners",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Owner)3368_storage)"
      },
      {
        "astId": 3389,
        "contract": "contracts/BuildingDAO.sol:BuildingDAO",
        "label": "proposalVotes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3391,
        "contract": "contracts/BuildingDAO.sol:BuildingDAO",
        "label": "proposalCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(VoteToken)4537": {
        "encoding": "inplace",
        "label": "contract VoteToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Owner)3368_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BuildingDAO.Owner)",
        "numberOfBytes": "32",
        "value": "t_struct(Owner)3368_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Building)3363_storage": {
        "encoding": "inplace",
        "label": "struct BuildingDAO.Building",
        "members": [
          {
            "astId": 3358,
            "contract": "contracts/BuildingDAO.sol:BuildingDAO",
            "label": "buildingName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3360,
            "contract": "contracts/BuildingDAO.sol:BuildingDAO",
            "label": "treasury",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3362,
            "contract": "contracts/BuildingDAO.sol:BuildingDAO",
            "label": "totalApartments",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Owner)3368_storage": {
        "encoding": "inplace",
        "label": "struct BuildingDAO.Owner",
        "members": [
          {
            "astId": 3365,
            "contract": "contracts/BuildingDAO.sol:BuildingDAO",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3367,
            "contract": "contracts/BuildingDAO.sol:BuildingDAO",
            "label": "delegateTo",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}